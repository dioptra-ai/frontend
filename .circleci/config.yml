# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

jobs:
  run-integration-tests:
    parameters:
      environment:
        type: string
    docker:
      - image: cimg/base:2021.10
    steps:
      - run:
          command: |
            curl -X POST https://circleci.com/api/v2/project/github/dioptra-ai/integration-tests/pipeline \
            -H "Content-Type: application/json" \
            -H "Accept: application/json" \
            -H "Circle-Token: ${CIRCLE_TOKEN}" \
            -d '{"parameters": {"environment": "<<parameters.environment>>"}}'

  build-and-push-image:
    executor:
      name: docker/machine
      dlc: true
    steps:
      - checkout
      - run:
          command: |
            git submodule init
            git submodule update --remote
      # aws-ecr/build-and-push-image doesn't use DLC as of circleci/aws-ecr@8.1.3 so we do it manually.
      - aws-ecr/ecr-login
      - docker/build:
          image: frontend
          extra_build_args: '--compress'
          tag: <<pipeline.git.revision>>,latest,<<pipeline.git.tag>>
          registry: 641017132295.dkr.ecr.us-east-2.amazonaws.com
      - docker/push:
          image: frontend
          tag: <<pipeline.git.revision>>,latest,<<pipeline.git.tag>>
          registry: 641017132295.dkr.ecr.us-east-2.amazonaws.com
  
  tag-image:
    docker:
      - image: cimg/aws:2022.11
    steps:
      - aws-ecr/tag-image:
          repo: frontend
          source-tag: <<pipeline.git.revision>>
          target-tag: <<pipeline.git.tag>>

  helm-upgrade:
    parameters:
      cluster-name:
        type: string
      aws-region:
        type: string
        default: us-east-2
      helm-values:
        type: string
      image-tag:
        type: string
        default: <<pipeline.git.revision>>
    circleci_ip_ranges: true
    docker:
      - image: 'cimg/python:3.10'
    steps:
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: <<parameters.cluster-name>>
          aws-region: <<parameters.aws-region>>
      - checkout
      - helm/upgrade-helm-chart:
          atomic: true
          chart: ./helm
          helm-version: v3.6.0
          release-name: frontend
          update-repositories: false
          values: <<parameters.helm-values>>
          values-to-override: imageTag=<<parameters.image-tag>>

orbs:
  aws-ecr: circleci/aws-ecr@8.1.3
  docker: circleci/docker@2.1.3
  helm: circleci/helm@1.2.0
  aws-eks: circleci/aws-eks@2.1.2
  node: circleci/node@4.5

workflows:
  'Build Branch':
    when:
      not:
        equal:
          - << pipeline.git.branch >>
          - dev
    jobs:
      - node/test:
          version: 16.4.0 # This to be kept in sync with Dockerfile
          run-command: lint
      - build-and-push-image:
          requires:
            - node/test
          context:
            - aws-creds

  'Build and Deploy to Dev':
    when:
      equal:
        - << pipeline.git.branch >>
        - dev
    jobs:
      - node/test:
          version: 16.4.0 # This to be kept in sync with Dockerfile
          run-command: lint
      - build-and-push-image:
          requires:
            - node/test
          context:
            - aws-creds
      - helm-upgrade:
          requires:
            - build-and-push-image
          cluster-name: dioptra-dev-eks
          helm-values: ./helm/values.dev.yaml
          image-tag: <<pipeline.git.revision>>
          context:
            - aws-creds
      - run-integration-tests:
          requires:
            - helm-upgrade
          environment: dev
          context:
            - circleci-creds

  'Release to Prod':
    jobs:
      - tag-image:
          context:
            - aws-creds
          filters: &prod-filters
            tags:
              only:
                - /^v.*/
            branches:
              ignore: /.*/
      - helm-upgrade:
          requires:
            - tag-image
          cluster-name: dioptra-prod-eks
          helm-values: ./helm/values.prod.yaml
          image-tag: <<pipeline.git.tag>>
          context:
            - aws-creds
          filters: *prod-filters
      - run-integration-tests:
          requires:
            - helm-upgrade
          environment: pro
          context:
            - circleci-creds
          filters: *prod-filters
